import{a as c}from"./chunk-KN3XS55W.js";import{a as s}from"./chunk-GQSCBKA6.js";var a=class{_generationEvent(t){return{kind:"llm",...t}}_retrievalEvent(t){let e=o=>typeof o=="string",r=t.results?.every(e),n=o=>typeof o=="string"?{pageContent:o,metadata:{}}:o,i=r?t.results?.map(n):t.results;return{kind:"vector",...t,results:i}}log(t,e){let r=typeof t=="string"?{[t]:e}:t;this.logEvent(r)}logGeneration(t){this.log(this._generationEvent(t))}logRetrieval(t){this.log(this._retrievalEvent(t))}},l=class extends a{constructor(e){super();s(this,"client");s(this,"collected",{});s(this,"currentLocalTraceId",0);s(this,"mode","off");this.client=e}_setMode(e){this.mode=e}nextTraceId(){return this.currentLocalTraceId++}async _flush(e){if(this.mode!=="experiment"){console.warn("Tracing mode must be set to <experiment>!");return}let r=this.collected[e]??[];delete this.collected[e];let n={id:this.nextTraceId(),experimentItemId:e,event:{kind:"root"}},i=[n];for(let o of r)i.push({id:this.nextTraceId(),experimentItemId:e,parentId:n.id,event:o});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:i})})}_logLiveTrace(e){if(this.mode!=="monitoring"){console.warn("Tracing mode must be set to <monitoring>!");return}this.client._logger.log({type:1,payload:e})}logEvent(e){let r=c.getStore();if(this.mode==="experiment"){let n=r?.tracing?.experiment?.itemId;if(!n){console.error("Unable to log trace event without experiment item ID.");return}this.collected[n]||(this.collected[n]=[]),this.collected[n].push(e)}else if(this.mode==="monitoring"){let n=this.client.monitoring._getTraceContext(r);if(!n)return;this._logLiveTrace({event:e,...n})}else console.warn("Attempt to send a log trace, but tracing mode is off!")}};export{a,l as b};
//# sourceMappingURL=chunk-IDZL3CVQ.js.map