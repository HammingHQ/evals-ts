{"version":3,"sources":["../src/httpClient.ts"],"names":["TOO_MANY_REQUESTS","INTERNAL_SERVER_ERROR","HttpClient","opts","__publicField","fetchClient_default","baseURL","input","init","url","finalInit","MAX_ATTEMPTS","IS_DEBUG","resp","attempt","error","response","status"],"mappings":"gDAEA,IAAMA,EAAoB,IACpBC,EAAwB,IAoBjBC,EAAN,KAAiB,CAOtB,YAAYC,EAAyB,CANrCC,EAAA,eACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,aAAiB,IACjBA,EAAA,eAAkB,GAGhB,KAAK,OAASD,EAAK,OACnB,KAAK,QAAU,KAAK,gBAAgBA,EAAK,OAAO,EAChD,KAAK,YAAc,IAAIE,EACvB,KAAK,MAAQ,QAAQ,IAAI,WAAa,aACxC,CAOQ,gBAAgBC,EAAyB,CAC/C,OAAOA,EAAQ,KAAK,EAAE,QAAQ,MAAO,EAAE,CACzC,CAEA,MAAM,MACJC,EACAC,EACmB,CACnB,IAAMC,EAAM,KAAK,QAAUF,EAErBG,EAAY,CAChB,GAAGF,EACH,QAAS,CACP,GAAGA,GAAM,QACT,eAAgBA,GAAM,UAAU,cAAc,GAAK,mBACnD,cAAe,UAAU,KAAK,MAAM,EACtC,CACF,EAEMG,EAAe,KAAK,QACpBC,EAAW,KAAK,MAElBA,IACF,QAAQ,MAAM,iBAAiBH,CAAG,EAAE,EACpC,QAAQ,MAAM,WAAWC,EAAU,QAAU,KAAK,EAAE,EAChDA,EAAU,MACZ,QAAQ,MAAM,SAASA,EAAU,IAAI,EAAE,EAEzC,QAAQ,MAAM,YAAY,KAAK,UAAUA,EAAU,QAAS,KAAM,CAAC,CAAC,EAAE,GAGxE,IAAMG,EAAO,MAAM,KAAK,YAAY,WAAWJ,EAAK,CAClD,GAAGC,EACH,QAAS,SAAUI,EAASC,EAAOC,EAAU,CAC3C,GAAIF,GAAWH,EAAc,MAAO,GAGpC,IAAMM,EAASD,GAAU,OAEzB,OACED,aAAiB,WACjBE,IAAWjB,GACViB,IAAW,QAAaA,GAAUhB,CAEvC,EACA,WAAY,SAAUa,EAASC,EAAOC,EAAUT,EAAO,CACrD,OAAIK,GACF,QAAQ,MACN,kBAAkBE,CAAO,WAAWP,CAAK,WAAWQ,GAAO,OAAO,qBAAqBC,GAAU,MAAM,0BAA0BA,GAAU,UAAU,EACvJ,EAEK,KAAK,IAAI,EAAGF,CAAO,EAAI,GAChC,CACF,CAAC,EAED,OAAIF,GACF,QAAQ,MAAM,gBAAgBH,CAAG,KAAKI,EAAK,MAAM,IAAIA,EAAK,UAAU,EAAE,EAGjEA,CACT,CACF","sourcesContent":["import FetchClient from \"./fetchClient\";\n\nconst TOO_MANY_REQUESTS = 429;\nconst INTERNAL_SERVER_ERROR = 500;\n\ninterface HttpClientOptions {\n  apiKey: string;\n  baseURL: string;\n}\n\n/**\n * The HttpClient provides methods to perform HTTP requests.\n * The `fetch` method is used to make a request to a specified endpoint.\n * It includes retry logic for transient errors, where it will retry the request\n * according to the `maxRetries` and `retryDelay` parameters.\n * For non-transient errors, it will fail fast and not retry the request.\n * @param input - The endpoint to which the request will be made.\n * @param init - The request options.\n * @param maxRetries - The maximum number of retries for the request.\n * @param retryDelay - The delay between retries.\n * @returns A promise that resolves to the response of the request, or rejects\n *          with an error if the request fails or all retries are exhausted.\n */\nexport class HttpClient {\n  apiKey: string;\n  baseURL: string;\n  fetchClient: FetchClient;\n  debug: boolean = false;\n  retries: number = 3;\n\n  constructor(opts: HttpClientOptions) {\n    this.apiKey = opts.apiKey;\n    this.baseURL = this.sanitizeBaseUrl(opts.baseURL);\n    this.fetchClient = new FetchClient();\n    this.debug = process.env.NODE_ENV === \"development\" ?? false;\n  }\n\n  /**\n   * Sanitizes the base URL by trimming whitespace and removing trailing slashes.\n   * @param baseURL - The base URL to sanitize.\n   * @returns The sanitized base URL.\n   */\n  private sanitizeBaseUrl(baseURL: string): string {\n    return baseURL.trim().replace(/\\/$/, \"\");\n  }\n\n  async fetch(\n    input: string,\n    init?: RequestInit | undefined,\n  ): Promise<Response> {\n    const url = this.baseURL + input;\n\n    const finalInit = {\n      ...init,\n      headers: {\n        ...init?.headers,\n        \"Content-Type\": init?.headers?.[\"Content-Type\"] ?? \"application/json\",\n        authorization: `Bearer ${this.apiKey}`,\n      },\n    };\n\n    const MAX_ATTEMPTS = this.retries;\n    const IS_DEBUG = this.debug;\n\n    if (IS_DEBUG) {\n      console.debug(`Fetching URL: ${url}`);\n      console.debug(`Method: ${finalInit.method || \"GET\"}`);\n      if (finalInit.body) {\n        console.debug(`Body: ${finalInit.body}`);\n      }\n      console.debug(`Headers: ${JSON.stringify(finalInit.headers, null, 2)}`);\n    }\n\n    const resp = await this.fetchClient.fetchRetry(url, {\n      ...finalInit,\n      retryOn: function (attempt, error, response) {\n        if (attempt >= MAX_ATTEMPTS) return false;\n\n        // Retry on too many requests, internal server error, or TypeError\n        const status = response?.status;\n\n        return (\n          error instanceof TypeError ||\n          status === TOO_MANY_REQUESTS ||\n          (status !== undefined && status >= INTERNAL_SERVER_ERROR)\n        );\n      },\n      retryDelay: function (attempt, error, response, input) {\n        if (IS_DEBUG) {\n          console.debug(\n            `Fetch attempt #${attempt}: input=${input}, error=${error?.message}, response status=${response?.status}, response status text=${response?.statusText}`,\n          );\n        }\n        return Math.pow(2, attempt) * 1000;\n      },\n    });\n\n    if (IS_DEBUG) {\n      console.debug(`Response for ${url}: ${resp.status} ${resp.statusText}`);\n    }\n\n    return resp;\n  }\n}\n"]}