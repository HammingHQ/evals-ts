{"version":3,"sources":["../src/fetchClient.ts"],"sourcesContent":["type RequestDelayFunction = (\n  attempt: number,\n  error: Error | null,\n  response: Response | null,\n  input?: string | Request,\n) => number;\n\ntype RequestRetryOnFunction = (\n  attempt: number,\n  error: Error | null,\n  response: Response | null,\n) => boolean | Promise<boolean>;\n\nexport interface RequestInitRetryParams {\n  retries?: number;\n  retryDelay?: number | RequestDelayFunction;\n  retryOn?: number[] | RequestRetryOnFunction;\n}\n\nexport type RequestInitWithRetry = RequestInit & RequestInitRetryParams;\n\nclass FetchClient {\n  private retries: number;\n  private retryDelay: number | RequestDelayFunction;\n  private retryOn: number[] | RequestRetryOnFunction;\n\n  constructor(defaults?: RequestInitRetryParams) {\n    const baseDefaults: RequestInitRetryParams = {\n      retries: 3,\n      retryDelay: 1000,\n      retryOn: [],\n    };\n\n    const finalDefaults = { ...baseDefaults, ...defaults };\n\n    this.validateDefaults(finalDefaults);\n\n    this.retries = finalDefaults.retries!;\n    this.retryDelay = finalDefaults.retryDelay!;\n    this.retryOn = finalDefaults.retryOn!;\n  }\n\n  private validateDefaults(defaults: RequestInitRetryParams): void {\n    if (\n      defaults.retries !== undefined &&\n      !this.isPositiveInteger(defaults.retries)\n    ) {\n      throw new ArgumentError(\"retries must be a positive integer\");\n    }\n\n    if (\n      defaults.retryDelay !== undefined &&\n      !this.isPositiveInteger(defaults.retryDelay) &&\n      typeof defaults.retryDelay !== \"function\"\n    ) {\n      throw new ArgumentError(\n        \"retryDelay must be a positive integer or a function returning a positive integer\",\n      );\n    }\n\n    if (\n      defaults.retryOn !== undefined &&\n      !Array.isArray(defaults.retryOn) &&\n      typeof defaults.retryOn !== \"function\"\n    ) {\n      throw new ArgumentError(\"retryOn property expects an array or function\");\n    }\n  }\n\n  private isPositiveInteger(value: any): value is number {\n    return Number.isInteger(value) && value >= 0;\n  }\n\n  public fetchRetry(\n    input: RequestInfo,\n    init?: RequestInitWithRetry,\n  ): Promise<Response> {\n    let retries = this.retries;\n    let retryDelay = this.retryDelay;\n    let retryOn = this.retryOn;\n\n    if (init) {\n      if (init.retries !== undefined && this.isPositiveInteger(init.retries)) {\n        retries = init.retries;\n      }\n\n      if (init.retryDelay !== undefined) {\n        if (\n          this.isPositiveInteger(init.retryDelay) ||\n          typeof init.retryDelay === \"function\"\n        ) {\n          retryDelay = init.retryDelay;\n        }\n      }\n\n      if (init.retryOn) {\n        if (Array.isArray(init.retryOn) || typeof init.retryOn === \"function\") {\n          retryOn = init.retryOn;\n        }\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      const wrappedFetch = (attempt: number) => {\n        const _input = input instanceof Request ? input.clone() : input;\n        fetch(_input, init)\n          .then((response) => {\n            if (Array.isArray(retryOn) && !retryOn.includes(response.status)) {\n              resolve(response);\n            } else if (typeof retryOn === \"function\") {\n              Promise.resolve(retryOn(attempt, null, response))\n                .then((retryOnResponse) => {\n                  if (retryOnResponse) {\n                    retry(attempt, null, response);\n                  } else {\n                    resolve(response);\n                  }\n                })\n                .catch(reject);\n            } else {\n              if (attempt < retries) {\n                retry(attempt, null, response);\n              } else {\n                resolve(response);\n              }\n            }\n          })\n          .catch((error) => {\n            if (typeof retryOn === \"function\") {\n              Promise.resolve(retryOn(attempt, error, null))\n                .then((retryOnResponse) => {\n                  if (retryOnResponse) {\n                    retry(attempt, error, null);\n                  } else {\n                    reject(error);\n                  }\n                })\n                .catch(reject);\n            } else if (attempt < retries) {\n              retry(attempt, error, null);\n            } else {\n              reject(error);\n            }\n          });\n      };\n\n      const retry = (\n        attempt: number,\n        error: Error | null,\n        response: Response | null,\n      ) => {\n        const delay =\n          typeof retryDelay === \"function\"\n            ? retryDelay(attempt, error, response, input)\n            : retryDelay;\n        setTimeout(() => {\n          wrappedFetch(++attempt);\n        }, delay);\n      };\n\n      wrappedFetch(0);\n    });\n  }\n}\n\nclass ArgumentError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ArgumentError\";\n  }\n}\n\nexport default FetchClient;\n"],"mappings":"wCAqBA,IAAMA,EAAN,KAAkB,CAKhB,YAAYC,EAAmC,CAJ/CC,EAAA,KAAQ,WACRA,EAAA,KAAQ,cACRA,EAAA,KAAQ,WASN,IAAMC,EAAgB,CAAE,GANqB,CAC3C,QAAS,EACT,WAAY,IACZ,QAAS,CAAC,CACZ,EAEyC,GAAGF,CAAS,EAErD,KAAK,iBAAiBE,CAAa,EAEnC,KAAK,QAAUA,EAAc,QAC7B,KAAK,WAAaA,EAAc,WAChC,KAAK,QAAUA,EAAc,OAC/B,CAEQ,iBAAiBF,EAAwC,CAC/D,GACEA,EAAS,UAAY,QACrB,CAAC,KAAK,kBAAkBA,EAAS,OAAO,EAExC,MAAM,IAAIG,EAAc,oCAAoC,EAG9D,GACEH,EAAS,aAAe,QACxB,CAAC,KAAK,kBAAkBA,EAAS,UAAU,GAC3C,OAAOA,EAAS,YAAe,WAE/B,MAAM,IAAIG,EACR,kFACF,EAGF,GACEH,EAAS,UAAY,QACrB,CAAC,MAAM,QAAQA,EAAS,OAAO,GAC/B,OAAOA,EAAS,SAAY,WAE5B,MAAM,IAAIG,EAAc,+CAA+C,CAE3E,CAEQ,kBAAkBC,EAA6B,CACrD,OAAO,OAAO,UAAUA,CAAK,GAAKA,GAAS,CAC7C,CAEO,WACLC,EACAC,EACmB,CACnB,IAAIC,EAAU,KAAK,QACfC,EAAa,KAAK,WAClBC,EAAU,KAAK,QAEnB,OAAIH,IACEA,EAAK,UAAY,QAAa,KAAK,kBAAkBA,EAAK,OAAO,IACnEC,EAAUD,EAAK,SAGbA,EAAK,aAAe,SAEpB,KAAK,kBAAkBA,EAAK,UAAU,GACtC,OAAOA,EAAK,YAAe,cAE3BE,EAAaF,EAAK,YAIlBA,EAAK,UACH,MAAM,QAAQA,EAAK,OAAO,GAAK,OAAOA,EAAK,SAAY,cACzDG,EAAUH,EAAK,UAKd,IAAI,QAAQ,CAACI,EAASC,IAAW,CACtC,IAAMC,EAAgBC,GAAoB,CACxC,IAAMC,EAAST,aAAiB,QAAUA,EAAM,MAAM,EAAIA,EAC1D,MAAMS,EAAQR,CAAI,EACf,KAAMS,GAAa,CACd,MAAM,QAAQN,CAAO,GAAK,CAACA,EAAQ,SAASM,EAAS,MAAM,EAC7DL,EAAQK,CAAQ,EACP,OAAON,GAAY,WAC5B,QAAQ,QAAQA,EAAQI,EAAS,KAAME,CAAQ,CAAC,EAC7C,KAAMC,GAAoB,CACrBA,EACFC,EAAMJ,EAAS,KAAME,CAAQ,EAE7BL,EAAQK,CAAQ,CAEpB,CAAC,EACA,MAAMJ,CAAM,EAEXE,EAAUN,EACZU,EAAMJ,EAAS,KAAME,CAAQ,EAE7BL,EAAQK,CAAQ,CAGtB,CAAC,EACA,MAAOG,GAAU,CACZ,OAAOT,GAAY,WACrB,QAAQ,QAAQA,EAAQI,EAASK,EAAO,IAAI,CAAC,EAC1C,KAAMF,GAAoB,CACrBA,EACFC,EAAMJ,EAASK,EAAO,IAAI,EAE1BP,EAAOO,CAAK,CAEhB,CAAC,EACA,MAAMP,CAAM,EACNE,EAAUN,EACnBU,EAAMJ,EAASK,EAAO,IAAI,EAE1BP,EAAOO,CAAK,CAEhB,CAAC,CACL,EAEMD,EAAQ,CACZJ,EACAK,EACAH,IACG,CACH,IAAMI,EACJ,OAAOX,GAAe,WAClBA,EAAWK,EAASK,EAAOH,EAAUV,CAAK,EAC1CG,EACN,WAAW,IAAM,CACfI,EAAa,EAAEC,CAAO,CACxB,EAAGM,CAAK,CACV,EAEAP,EAAa,CAAC,CAChB,CAAC,CACH,CACF,EAEMT,EAAN,cAA4B,KAAM,CAChC,YAAYiB,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,eACd,CACF,EAEOC,EAAQtB","names":["FetchClient","defaults","__publicField","finalDefaults","ArgumentError","value","input","init","retries","retryDelay","retryOn","resolve","reject","wrappedFetch","attempt","_input","response","retryOnResponse","retry","error","delay","message","fetchClient_default"]}