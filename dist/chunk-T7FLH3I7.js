import{a as x}from"./chunk-JBBCHZDP.js";import{b as h}from"./chunk-P7625NFJ.js";import{a as c}from"./chunk-GQSCBKA6.js";var d=class{constructor(t){c(this,"client");this.client=t}async start(t,e){let n=(await(await this.client.fetch(`/experiments/${t.id}/items`,{method:"POST",body:JSON.stringify({datasetItemId:e.id,output:{},metrics:{}})})).json()).item,o=Date.now();return{item:n,startTs:o}}async end(t,e){let{item:a,startTs:i}=t,n=Date.now()-i;await this.client.tracing._flush(a.id),await this.client.fetch(`/experiments/${a.experimentId}/items/${a.id}`,{method:"PATCH",body:JSON.stringify({output:e,metrics:{durationMs:n}})})}},w=class{constructor(t){c(this,"client");c(this,"items");this.client=t,this.items=new d(this.client)}async run(t,e){this.client.tracing._setMode("experiment");let{dataset:a}=t,i=await this.client.datasets.load(a),{name:n=this.generateName(i.name),scoring:o=h,metadata:l={}}=t,r=await this.start(n,a,o,l),u=`${new URL(this.client.baseURL).origin}/experiments/${r.id}`;try{if(t.parallel){let s=async m=>{let f=await this.items.start(r,m),g=await e(m.input);await this.items.end(f,g)},p=typeof t.parallel=="number"?t.parallel:void 0;await x(i.items,s,p)}else for(let s of i.items){let p=await this.items.start(r,s),m=await e(s.input);await this.items.end(p,m)}}catch(s){throw await this.end(r,"FAILED"),s}finally{await this.end(r),console.log("See experiment results at:",u)}return{experimentUrl:u}}async start(t,e,a,i){let n="RUNNING";return(await(await this.client.fetch("/experiments",{method:"POST",body:JSON.stringify({name:t,dataset:e,status:n,scoring:a,metadata:i})})).json()).experiment}async end(t,e="FINISHED"){await this.client.fetch(`/experiments/${t.id}`,{method:"PATCH",body:JSON.stringify({status:e})})}generateName(t){return`Experiment for ${t} - ${new Date().toLocaleString()}`}};export{w as a};
//# sourceMappingURL=chunk-T7FLH3I7.js.map