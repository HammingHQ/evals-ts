"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _chunkDGYN466Bcjs = require('./chunk-DGYN466B.cjs');var _chunk7ARU3YXQcjs = require('./chunk-7ARU3YXQ.cjs');var a=class{_generationEvent(t){return{kind:"llm",...t}}_retrievalEvent(t){let e=o=>typeof o=="string",r=_optionalChain([t, 'access', _ => _.results, 'optionalAccess', _2 => _2.every, 'call', _3 => _3(e)]),n=o=>typeof o=="string"?{pageContent:o,metadata:{}}:o,i=r?_optionalChain([t, 'access', _4 => _4.results, 'optionalAccess', _5 => _5.map, 'call', _6 => _6(n)]):t.results;return{kind:"vector",...t,results:i}}log(t,e){let r=typeof t=="string"?{[t]:e}:t;this.logEvent(r)}logGeneration(t){this.log(this._generationEvent(t))}logRetrieval(t){this.log(this._retrievalEvent(t))}},l= exports.b =class extends a{constructor(e){super();_chunk7ARU3YXQcjs.a.call(void 0, this,"client");_chunk7ARU3YXQcjs.a.call(void 0, this,"collected",{});_chunk7ARU3YXQcjs.a.call(void 0, this,"currentLocalTraceId",0);_chunk7ARU3YXQcjs.a.call(void 0, this,"mode","off");this.client=e}_setMode(e){this.mode=e}nextTraceId(){return this.currentLocalTraceId++}async _flush(e){if(this.mode!=="experiment"){console.warn("Tracing mode must be set to <experiment>!");return}let r=_nullishCoalesce(this.collected[e], () => ([]));delete this.collected[e];let n={id:this.nextTraceId(),experimentItemId:e,event:{kind:"root"}},i=[n];for(let o of r)i.push({id:this.nextTraceId(),experimentItemId:e,parentId:n.id,event:o});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:i})})}_logLiveTrace(e){if(this.mode!=="monitoring"){console.warn("Tracing mode must be set to <monitoring>!");return}this.client._logger.log({type:1,payload:e})}logEvent(e){let r=_chunkDGYN466Bcjs.a.getStore();if(this.mode==="experiment"){let n=_optionalChain([r, 'optionalAccess', _7 => _7.tracing, 'optionalAccess', _8 => _8.experiment, 'optionalAccess', _9 => _9.itemId]);if(!n){console.error("Unable to log trace event without experiment item ID.");return}this.collected[n]||(this.collected[n]=[]),this.collected[n].push(e)}else if(this.mode==="monitoring"){let n=this.client.monitoring._getTraceContext(r);this._logLiveTrace({event:e,...n})}else console.warn("Attempt to send a log trace, but tracing mode is off!")}};exports.a = a; exports.b = l;
//# sourceMappingURL=chunk-MI7IBGFV.cjs.map