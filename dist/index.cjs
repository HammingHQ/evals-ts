"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _chunk3BNAGLBMcjs = require('./chunk-3BNAGLBM.cjs');require('./chunk-JG6LIMBV.cjs');var _chunkSV3NKFSMcjs = require('./chunk-SV3NKFSM.cjs');var _chunk7ARU3YXQcjs = require('./chunk-7ARU3YXQ.cjs');var N=(a=>(a.CREATED="CREATED",a.RUNNING="RUNNING",a.SCORING="SCORING",a.SCORING_FAILED="SCORING_FAILED",a.FINISHED="FINISHED",a.FAILED="FAILED",a))(N||{}),I=class{constructor(t){_chunk7ARU3YXQcjs.a.call(void 0, this,"client");this.client=t}async start(t,e){let r=(await(await this.client.fetch(`/experiments/${t.id}/items`,{method:"POST",body:JSON.stringify({datasetItemId:e.id,output:{},metrics:{}})})).json()).item,a=Date.now();return{item:r,startTs:a}}async end(t,e){let{item:n,startTs:i}=t,r=Date.now()-i;await this.client.tracing._flush(n.id),await this.client.fetch(`/experiments/${n.experimentId}/items/${n.id}`,{method:"PATCH",body:JSON.stringify({output:e,metrics:{durationMs:r}})})}},f=class{constructor(t){_chunk7ARU3YXQcjs.a.call(void 0, this,"client");_chunk7ARU3YXQcjs.a.call(void 0, this,"items");this.client=t,this.items=new I(this.client)}async run(t,e){let{dataset:n}=t,i=await this.client.datasets.load(n),{name:r=this.generateName(i.name),scoring:a=O,metadata:g={}}=t,s=await this.start(r,n,a,g),x=`${new URL(this.client.baseURL).origin}/experiments/${s.id}`;try{if(t.parallel){let c=async d=>{let l=await this.items.start(s,d),D={tracing:new u(this.client.tracing,l.item.id)},R=await e(d.input,D);await this.items.end(l,R)},p=typeof t.parallel=="number"?t.parallel:void 0;await _chunkSV3NKFSMcjs.a.call(void 0, i.items,c,p)}else for(let c of i.items){let p=await this.items.start(s,c),d={tracing:new u(this.client.tracing,p.item.id)},l=await e(c.input,d);await this.items.end(p,l)}}catch(c){throw await this.end(s,"FAILED"),c}finally{await this.end(s),console.log("See experiment results at:",x)}return{experimentUrl:x}}async start(t,e,n,i){return(await(await this.client.fetch("/experiments",{method:"POST",body:JSON.stringify({name:t,dataset:e,status:"RUNNING",scoring:n,metadata:i})})).json()).experiment}async end(t,e="FINISHED"){await this.client.fetch(`/experiments/${t.id}`,{method:"PATCH",body:JSON.stringify({status:e})})}generateName(t){return`Experiment for ${t} - ${new Date().toLocaleString()}`}},b= exports.ScoreType =(s=>(s.AccuracyAI="accuracy_ai",s.FactsCompare="facts_compare",s.ContextRecall="context_recall",s.ContextPrecision="context_precision",s.Hallucination="hallucination",s.StringDiff="string_diff",s.Refusal="refusal",s.SqlAst="sql_ast",s))(b||{}),O= exports.DefaultScoreTypes =["string_diff"],y=class{constructor(t){_chunk7ARU3YXQcjs.a.call(void 0, this,"client");this.client=t}async load(t){let e=await this.client.fetch(`/datasets/${t}`,{method:"GET"}),n;try{n=await e.json()}catch(i){throw new Error(`Failed to parse dataset response as JSON for dataset ID: ${t}: ${i}`)}return n.dataset}async list(){return(await(await this.client.fetch("/datasets")).json()).datasets}async create(t){let{name:e,description:n,items:i}=t;return(await(await this.client.fetch("/datasets",{method:"POST",body:JSON.stringify({name:e,description:n,items:i})})).json()).dataset}},v=class{constructor(t){_chunk7ARU3YXQcjs.a.call(void 0, this,"client");_chunk7ARU3YXQcjs.a.call(void 0, this,"collected",{});_chunk7ARU3YXQcjs.a.call(void 0, this,"currentLocalTraceId",0);this.client=t}nextTraceId(){return this.currentLocalTraceId++}async _flush(t){let e=_nullishCoalesce(this.collected[t], () => ([]));delete this.collected[t];let n={id:this.nextTraceId(),experimentItemId:t,event:{kind:"root"}},i=[n];for(let r of e)i.push({id:this.nextTraceId(),experimentItemId:t,parentId:n.id,event:r});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:i})})}_generationEvent(t){return{kind:"llm",...t}}_retrievalEvent(t){let e=a=>typeof a=="string",n=_optionalChain([t, 'access', _ => _.results, 'optionalAccess', _2 => _2.every, 'call', _3 => _3(e)]),i=a=>typeof a=="string"?{pageContent:a,metadata:{}}:a,r=n?_optionalChain([t, 'access', _4 => _4.results, 'optionalAccess', _5 => _5.map, 'call', _6 => _6(i)]):t.results;return{kind:"vector",...t,results:r}}log(t,e,n){let{event:i,tracingCtx:r}=(()=>{if(typeof t=="string"){let s=t,h=e;return{event:{[s]:h},tracingCtx:n}}else return{event:t,tracingCtx:e}})(),a=_optionalChain([r, 'optionalAccess', _7 => _7.experiment, 'optionalAccess', _8 => _8.itemId]);if(!a)throw new Error("Experiment item ID not found, use the new API 'ctx.tracing'.");this.collected[a]||(this.collected[a]=[]),this.collected[a].push(i)}logGeneration(t,e){this.log(this._generationEvent(t),e)}logRetrieval(t,e){this.log(this._retrievalEvent(t),e)}},u=class{constructor(t,e){_chunk7ARU3YXQcjs.a.call(void 0, this,"wrapped");_chunk7ARU3YXQcjs.a.call(void 0, this,"ctx");this.wrapped=t,this.ctx={experiment:{itemId:e}}}logGeneration(t){this.wrapped.logGeneration(t,this.ctx)}logRetrieval(t){this.wrapped.logRetrieval(t,this.ctx)}log(t,e){typeof t=="string"?this.wrapped.log(t,e,this.ctx):this.wrapped.log(t,this.ctx)}},C=["apiKey","baseURL"],E= exports.Hamming =class extends _chunk3BNAGLBMcjs.a{constructor(e){let n=Object.keys(e).filter(i=>!C.includes(i));n.length>0&&console.warn(`WARNING: Unexpected config keys found: ${n.join(", ")}. Valid config keys are: ${C.join(", ")}. The unexpected keys will be ignored.`);super({apiKey:e.apiKey,baseURL:_nullishCoalesce(e.baseURL, () => ("https://app.hamming.ai/api/rest"))});_chunk7ARU3YXQcjs.a.call(void 0, this,"experiments",new f(this));_chunk7ARU3YXQcjs.a.call(void 0, this,"datasets",new y(this));_chunk7ARU3YXQcjs.a.call(void 0, this,"tracing",new v(this))}};exports.DefaultScoreTypes = O; exports.ExperimentStatus = N; exports.Hamming = E; exports.ScoreType = b;
//# sourceMappingURL=index.cjs.map