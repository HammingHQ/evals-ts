{"version":3,"sources":["../src/resources/Datasets.ts"],"names":["Datasets","client","__publicField","id","resp","data","error","opts","name","description","items"],"mappings":"yCAUO,IAAMA,EAAN,KAAe,CAGpB,YAAYC,EAAiB,CAF7BC,EAAA,KAAQ,UAGN,KAAK,OAASD,CAChB,CAEA,MAAM,KAAKE,EAA0C,CACnD,IAAMC,EAAO,MAAM,KAAK,OAAO,MAAM,aAAaD,CAAE,GAAI,CACtD,OAAQ,KACV,CAAC,EAEGE,EACJ,GAAI,CACFA,EAAO,MAAMD,EAAK,KAAK,CACzB,OAASE,EAAO,CACd,MAAM,IAAI,MACR,4DAA4DH,CAAE,KAAKG,CAAK,EAC1E,CACF,CACA,OAAOD,EAAK,OACd,CAEA,MAAM,MAA2B,CAG/B,OADa,MADA,MAAM,KAAK,OAAO,MAAM,WAAW,GACxB,KAAK,GACjB,QACd,CAEA,MAAM,OAAOE,EAAuD,CAClE,GAAM,CAAE,KAAAC,EAAM,YAAAC,EAAa,MAAAC,CAAM,EAAIH,EAUrC,OADa,MARA,MAAM,KAAK,OAAO,MAAM,YAAa,CAChD,OAAQ,OACR,KAAM,KAAK,UAAU,CACnB,KAAAC,EACA,YAAAC,EACA,MAAAC,CACF,CAAC,CACH,CAAC,GACuB,KAAK,GACjB,OACd,CACF","sourcesContent":["import type { Hamming } from \"../index\";\nimport {\n  CreateDatasetOptions,\n  Dataset,\n  DatasetId,\n  DatasetItem,\n} from \"../types/datasets\";\n\ntype DatasetWithItems = Dataset & { items: DatasetItem[] };\n\nexport class Datasets {\n  private client: Hamming;\n\n  constructor(client: Hamming) {\n    this.client = client;\n  }\n\n  async load(id: DatasetId): Promise<DatasetWithItems> {\n    const resp = await this.client.fetch(`/datasets/${id}`, {\n      method: \"GET\",\n    });\n\n    let data: { dataset: DatasetWithItems };\n    try {\n      data = await resp.json();\n    } catch (error) {\n      throw new Error(\n        `Failed to parse dataset response as JSON for dataset ID: ${id}: ${error}`,\n      );\n    }\n    return data.dataset as DatasetWithItems;\n  }\n\n  async list(): Promise<Dataset[]> {\n    const resp = await this.client.fetch(`/datasets`);\n    const data = await resp.json();\n    return data.datasets as Dataset[];\n  }\n\n  async create(opts: CreateDatasetOptions): Promise<DatasetWithItems> {\n    const { name, description, items } = opts;\n    const resp = await this.client.fetch(\"/datasets\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        description,\n        items,\n      }),\n    });\n    const data = await resp.json();\n    return data.dataset as DatasetWithItems;\n  }\n}\n"]}