"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _chunk7ARU3YXQcjs = require('./chunk-7ARU3YXQ.cjs');var a=class{constructor(e){_chunk7ARU3YXQcjs.a.call(void 0, this,"client");_chunk7ARU3YXQcjs.a.call(void 0, this,"collected",[]);_chunk7ARU3YXQcjs.a.call(void 0, this,"currentLocalTraceId",0);_chunk7ARU3YXQcjs.a.call(void 0, this,"mode","off");this.client=e}_setMode(e){this.mode=e}nextTraceId(){return this.currentLocalTraceId++}async _flush(e){if(this.mode!=="experiment"){console.warn("Tracing mode must be set to <experiment>!");return}let n=this.collected;this.collected=[];let t={id:this.nextTraceId(),experimentItemId:e,event:{kind:"root"}},r=[t];for(let s of n)r.push({id:this.nextTraceId(),experimentItemId:e,parentId:t.id,event:s});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:r})})}_generationEvent(e){return{kind:"llm",...e}}_retrievalEvent(e){let n=o=>typeof o=="string",t=_optionalChain([e, 'access', _ => _.results, 'optionalAccess', _2 => _2.every, 'call', _3 => _3(n)]),r=o=>typeof o=="string"?{pageContent:o,metadata:{}}:o,s=t?_optionalChain([e, 'access', _4 => _4.results, 'optionalAccess', _5 => _5.map, 'call', _6 => _6(r)]):e.results;return{kind:"vector",...e,results:s}}_logLiveTrace(e){if(this.mode!=="monitoring"){console.warn("Tracing mode must be set to <monitoring>!");return}this.client.logger.log({type:1,payload:e})}log(e,n){if(this.mode==="monitoring"){let t=this.client.monitoring._getTraceContext();typeof e=="string"?this._logLiveTrace({...t,event:{[e]:n}}):this._logLiveTrace({...t,event:e})}else this.mode==="experiment"?typeof e=="string"?this.collected.push({[e]:n}):this.collected.push(e):console.warn("Attempt to send a log trace, but tracing mode is off!")}logGeneration(e){this.log(this._generationEvent(e))}logRetrieval(e){this.log(this._retrievalEvent(e))}};exports.a = a;
//# sourceMappingURL=chunk-EHSPI4X3.cjs.map