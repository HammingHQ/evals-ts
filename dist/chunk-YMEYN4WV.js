import{a as s}from"./chunk-KN3XS55W.js";import{a}from"./chunk-GQSCBKA6.js";var c=class{constructor(e){a(this,"client");a(this,"collected",{});a(this,"currentLocalTraceId",0);this.client=e}nextTraceId(){return this.currentLocalTraceId++}async _flush(e){let i=this.collected[e]??[];delete this.collected[e];let n={id:this.nextTraceId(),experimentItemId:e,event:{kind:"root"}},o=[n];for(let t of i)o.push({id:this.nextTraceId(),experimentItemId:e,parentId:n.id,event:t});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:o})})}_generationEvent(e){return{kind:"llm",...e}}_retrievalEvent(e){let i=r=>typeof r=="string",n=e.results?.every(i),o=r=>typeof r=="string"?{pageContent:r,metadata:{}}:r,t=n?e.results?.map(o):e.results;return{kind:"vector",...e,results:t}}log(e,i){let n=typeof e=="string"?{[e]:i}:e,t=s.getStore()?.tracing?.experiment?.itemId;if(!t){console.error("Unable to log trace event without experiment item ID.");return}this.collected[t]||(this.collected[t]=[]),this.collected[t].push(n)}logGeneration(e){this.log(this._generationEvent(e))}logRetrieval(e){this.log(this._retrievalEvent(e))}};export{c as a};
//# sourceMappingURL=chunk-YMEYN4WV.js.map