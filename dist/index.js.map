{"version":3,"sources":["../src/index.ts"],"sourcesContent":["const sum = (a: number, b: number) => a + b;\n\nexport { sum };\n\nexport enum ExperimentStatus {\n  CREATED = 'CREATED',\n  RUNNING = 'RUNNING',\n  SCORING = 'SCORING',\n  SCORING_FAILED = 'SCORING_FAILED',\n  FINISHED = 'FINISHED',\n  FAILED = 'FAILED',\n}\n\n\nexport interface ClientOptions {\n  apiKey: string;\n  baseURL: string;\n}\n\nexport interface Experiment {\n  id: number;\n  name: string;\n  description?: string | null;\n  datasetId: number;\n  datasetVersionId?: number;\n  status: ExperimentStatus;\n}\n\nexport interface ExperimentItemMetrics {\n  durationMs: number;\n}\n\nexport interface ExperimentItem {\n  datasetItemId: number;\n  output: OutputType;\n  metrics: ExperimentItemMetrics;\n}\n\nexport interface ExperimentItemContext {\n  experiment: Experiment;\n  item: ExperimentItem;\n  startTs: number;\n}\n\nexport type InputType = Record<string, any>;\nexport type OutputType = Record<string, any>;\nexport type MetadataType = Record<string, any>;\n\ninterface DatasetItem {\n  id: number;\n  input: InputType;\n  output: OutputType;\n  metadata: MetadataType;\n}\n\ninterface Dataset {\n  id: number;\n  name: string;\n  description?: string;\n  items: DatasetItem[];\n}\n\nclass ExperimentItems {\n  private client: Hamming;\n\n  constructor(client: Hamming) {\n    this.client = client;\n  }\n\n  start(\n    experiment: Experiment,\n    datasetItem: DatasetItem,\n  ): ExperimentItemContext {\n    const startTs = Date.now();\n    return {\n      experiment,\n      item: {\n        datasetItemId: datasetItem.id,\n        output: {},\n        metrics: {\n          durationMs: 0,\n        },\n      },\n      startTs,\n    };\n  }\n\n  async end(ctx: ExperimentItemContext, output: OutputType = {}) {\n    const durationMs = Date.now() - ctx.startTs;\n    ctx.item.metrics.durationMs = durationMs;\n    ctx.item.output = output;\n    await this.client.fetch(`/experiments/${ctx.experiment.id}/items`, {\n      method: 'POST',\n      body: JSON.stringify(ctx.item),\n    });\n  }\n}\n\nclass Experiments {\n  private client: Hamming;\n\n  items: ExperimentItems;\n\n  constructor(client: Hamming) {\n    this.client = client;\n    this.items = new ExperimentItems(this.client);\n  }\n\n  async start(name: string, dataset: number): Promise<Experiment> {\n    const status = ExperimentStatus.RUNNING;\n    const resp = await this.client.fetch('/experiments', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        dataset,\n        status,\n      }),\n    });\n    const data = await resp.json();\n    return data.experiment as Experiment;\n  }\n\n  async end(\n    experiment: Experiment,\n    status: ExperimentStatus = ExperimentStatus.FINISHED\n  ) {\n    await this.client.fetch(`/experiments/${experiment.id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        status,\n      }),\n    });\n  }\n}\n\nclass Datasets {\n  private client: Hamming;\n\n  constructor(client: Hamming) {\n    this.client = client;\n  }\n\n  async load(id: number): Promise<Dataset> {\n    const resp = await this.client.fetch(`/datasets/${id}`);\n    const data = await resp.json();\n    return data.dataset as Dataset;\n  }\n}\n\nclass HttpClientOptions {\n  apiKey: string;\n  baseURL: string;\n}\n\nclass HttpClient {\n  apiKey: string;\n  baseURL: string;\n\n  constructor(opts: HttpClientOptions) {\n    this.apiKey = opts.apiKey;\n    this.baseURL = this.sanitize_base_url(opts.baseURL);\n  }\n\n  private sanitize_base_url(baseURL: string): string {\n    baseURL = baseURL.trim();\n    if (baseURL.endsWith('/')) {\n      return baseURL.slice(0, -1);\n    }\n    return baseURL;\n  }\n\n  fetch(input: string, init?: RequestInit | undefined): Promise<Response> {\n    return fetch(this.baseURL + input, {\n      ...init,\n      headers: {\n        ...init?.headers,\n        'authorization': `Bearer ${this.apiKey}`,\n        'content-type': 'application/json',\n      },\n    });\n  }\n}\n\nexport class Hamming extends HttpClient {\n  constructor(config: ClientOptions) {\n    super({\n      apiKey: config.apiKey,\n      baseURL: config.baseURL,\n    });\n  }\n\n  experiments = new Experiments(this);\n  datasets = new Datasets(this);\n}\n"],"mappings":"wKAAA,IAAMA,EAAM,CAACC,EAAWC,IAAcD,EAAIC,EAInC,IAAKC,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,eAAiB,iBACjBA,EAAA,SAAW,WACXA,EAAA,OAAS,SANCA,OAAA,IA0DNC,EAAN,KAAsB,CAGpB,YAAYC,EAAiB,CAF7BC,EAAA,KAAQ,UAGN,KAAK,OAASD,CAChB,CAEA,MACEE,EACAC,EACuB,CACvB,IAAMC,EAAU,KAAK,IAAI,EACzB,MAAO,CACL,WAAAF,EACA,KAAM,CACJ,cAAeC,EAAY,GAC3B,OAAQ,CAAC,EACT,QAAS,CACP,WAAY,CACd,CACF,EACA,QAAAC,CACF,CACF,CAEA,MAAM,IAAIC,EAA4BC,EAAqB,CAAC,EAAG,CAC7D,IAAMC,EAAa,KAAK,IAAI,EAAIF,EAAI,QACpCA,EAAI,KAAK,QAAQ,WAAaE,EAC9BF,EAAI,KAAK,OAASC,EAClB,MAAM,KAAK,OAAO,MAAM,gBAAgBD,EAAI,WAAW,EAAE,SAAU,CACjE,OAAQ,OACR,KAAM,KAAK,UAAUA,EAAI,IAAI,CAC/B,CAAC,CACH,CACF,EAEMG,EAAN,KAAkB,CAKhB,YAAYR,EAAiB,CAJ7BC,EAAA,KAAQ,UAERA,EAAA,cAGE,KAAK,OAASD,EACd,KAAK,MAAQ,IAAID,EAAgB,KAAK,MAAM,CAC9C,CAEA,MAAM,MAAMU,EAAcC,EAAsC,CAW9D,OADa,MARA,MAAM,KAAK,OAAO,MAAM,eAAgB,CACnD,OAAQ,OACR,KAAM,KAAK,UAAU,CACnB,KAAAD,EACA,QAAAC,EACA,OANW,SAOb,CAAC,CACH,CAAC,GACuB,KAAK,GACjB,UACd,CAEA,MAAM,IACJR,EACAS,EAA2B,WAC3B,CACA,MAAM,KAAK,OAAO,MAAM,gBAAgBT,EAAW,EAAE,GAAI,CACvD,OAAQ,QACR,KAAM,KAAK,UAAU,CACnB,OAAAS,CACF,CAAC,CACH,CAAC,CACH,CACF,EAEMC,EAAN,KAAe,CAGb,YAAYZ,EAAiB,CAF7BC,EAAA,KAAQ,UAGN,KAAK,OAASD,CAChB,CAEA,MAAM,KAAKa,EAA8B,CAGvC,OADa,MADA,MAAM,KAAK,OAAO,MAAM,aAAaA,CAAE,EAAE,GAC9B,KAAK,GACjB,OACd,CACF,EAOA,IAAMC,EAAN,KAAiB,CAIf,YAAYC,EAAyB,CAHrCC,EAAA,eACAA,EAAA,gBAGE,KAAK,OAASD,EAAK,OACnB,KAAK,QAAU,KAAK,kBAAkBA,EAAK,OAAO,CACpD,CAEQ,kBAAkBE,EAAyB,CAEjD,OADAA,EAAUA,EAAQ,KAAK,EACnBA,EAAQ,SAAS,GAAG,EACfA,EAAQ,MAAM,EAAG,EAAE,EAErBA,CACT,CAEA,MAAMC,EAAeC,EAAmD,CACtE,OAAO,MAAM,KAAK,QAAUD,EAAO,CACjC,GAAGC,EACH,QAAS,CACP,GAAGA,GAAM,QACT,cAAiB,UAAU,KAAK,MAAM,GACtC,eAAgB,kBAClB,CACF,CAAC,CACH,CACF,EAEaC,EAAN,cAAsBN,CAAW,CACtC,YAAYO,EAAuB,CACjC,MAAM,CACJ,OAAQA,EAAO,OACf,QAASA,EAAO,OAClB,CAAC,EAGHL,EAAA,mBAAc,IAAIM,EAAY,IAAI,GAClCN,EAAA,gBAAW,IAAIO,EAAS,IAAI,EAH5B,CAIF","names":["sum","a","b","ExperimentStatus","ExperimentItems","client","__publicField","experiment","datasetItem","startTs","ctx","output","durationMs","Experiments","name","dataset","status","Datasets","id","HttpClient","opts","__publicField","baseURL","input","init","Hamming","config","Experiments","Datasets"]}