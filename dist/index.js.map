{"version":3,"sources":["../src/index.ts"],"sourcesContent":["export enum ExperimentStatus {\n  CREATED = \"CREATED\",\n  RUNNING = \"RUNNING\",\n  SCORING = \"SCORING\",\n  SCORING_FAILED = \"SCORING_FAILED\",\n  FINISHED = \"FINISHED\",\n  FAILED = \"FAILED\",\n}\n\nexport interface ClientOptions {\n  apiKey: string;\n  baseURL: string;\n}\n\nexport interface Experiment {\n  id: number;\n  name: string;\n  description?: string | null;\n  datasetId: number;\n  datasetVersionId?: number;\n  status: ExperimentStatus;\n}\n\nexport interface ExperimentItemMetrics {\n  durationMs: number;\n}\n\nexport interface ExperimentItem {\n  datasetItemId: number;\n  output: OutputType;\n  metrics: ExperimentItemMetrics;\n}\n\nexport interface ExperimentItemContext {\n  experiment: Experiment;\n  item: ExperimentItem;\n  startTs: number;\n}\n\nexport type InputType = { query: string } & Record<string, any>;\nexport type OutputType = { response: string } & Record<string, any>;\nexport type MetadataType = Record<string, any>;\n\nexport interface DatasetItemValue {\n  input: InputType;\n  output: OutputType;\n  metadata: MetadataType;\n}\n\ntype DatasetItem = DatasetItemValue & { id: number };\n\ninterface Dataset {\n  id: number;\n  name: string;\n  description?: string;\n  items: DatasetItem[];\n}\n\nclass ExperimentItems {\n  private client: Hamming;\n\n  constructor(client: Hamming) {\n    this.client = client;\n  }\n\n  start(\n    experiment: Experiment,\n    datasetItem: DatasetItem,\n  ): ExperimentItemContext {\n    const startTs = Date.now();\n    return {\n      experiment,\n      item: {\n        datasetItemId: datasetItem.id,\n        output: {\n          response: \"\",\n        },\n        metrics: {\n          durationMs: 0,\n        },\n      },\n      startTs,\n    };\n  }\n\n  async end(ctx: ExperimentItemContext, output: OutputType) {\n    const durationMs = Date.now() - ctx.startTs;\n    ctx.item.metrics.durationMs = durationMs;\n    ctx.item.output = output;\n    await this.client.fetch(`/experiments/${ctx.experiment.id}/items`, {\n      method: \"POST\",\n      body: JSON.stringify(ctx.item),\n    });\n  }\n}\n\nclass Experiments {\n  private client: Hamming;\n  private items: ExperimentItems;\n\n  constructor(client: Hamming) {\n    this.client = client;\n    this.items = new ExperimentItems(this.client);\n  }\n\n  async run(opts: RunOptions, run: Runner) {\n    const { dataset: datasetId } = opts;\n    const dataset = await this.client.datasets.load(datasetId);\n\n    const {\n      name = this.generateName(dataset.name),\n      score = DefaultScoreTypes,\n    } = opts;\n\n    const experiment = await this.start(name, datasetId, score);\n    try {\n      for (const datasetItem of dataset.items) {\n        const itemCtx = this.items.start(experiment, datasetItem);\n        const output = await run(datasetItem.input);\n        await this.items.end(itemCtx, output);\n      }\n    } catch (err) {\n      await this.end(experiment, ExperimentStatus.FAILED);\n      throw err;\n    } finally {\n      await this.end(experiment);\n    }\n  }\n\n  private async start(\n    name: string,\n    dataset: number,\n    score: ScoreType[],\n  ): Promise<Experiment> {\n    const status = ExperimentStatus.RUNNING;\n    const resp = await this.client.fetch(\"/experiments\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        dataset,\n        status,\n        score,\n      }),\n    });\n    const data = await resp.json();\n    return data.experiment as Experiment;\n  }\n\n  private async end(\n    experiment: Experiment,\n    status: ExperimentStatus = ExperimentStatus.FINISHED,\n  ) {\n    await this.client.fetch(`/experiments/${experiment.id}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        status,\n      }),\n    });\n  }\n\n  private generateName(datasetName: string): string {\n    const now = new Date();\n    return `Experiment for ${datasetName} - ${now.toLocaleString()}`;\n  }\n}\n\nexport type DatasetId = number;\n\ninterface RunOptions {\n  dataset: DatasetId;\n  name?: string;\n  score?: ScoreType[];\n}\n\nexport type Runner = (input: InputType) => Promise<OutputType>;\n\nexport enum ScoreType {\n  \"accuracy_ai\" = \"accuracy_ai\",\n  \"accuracy_human\" = \"accuracy_human\",\n  \"facts_compare\" = \"facts_compare\",\n  \"context_recall\" = \"context_recall\",\n  \"context_precision\" = \"context_precision\",\n  \"hallucination\" = \"hallucination\",\n  \"string_diff\" = \"string_diff\",\n}\n\nexport const DefaultScoreTypes = [ScoreType.string_diff];\n\nclass Datasets {\n  private client: Hamming;\n\n  constructor(client: Hamming) {\n    this.client = client;\n  }\n\n  async load(id: DatasetId): Promise<Dataset> {\n    const resp = await this.client.fetch(`/datasets/${id}`);\n    const data = await resp.json();\n    return data.dataset as Dataset;\n  }\n\n  async create(opts: CreateDatasetOptions): Promise<Dataset> {\n    const { name, description, items } = opts;\n    const resp = await this.client.fetch(\"/datasets\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        description,\n        items,\n      }),\n    });\n    const data = await resp.json();\n    return data.dataset as Dataset;\n  }\n}\n\nexport interface CreateDatasetOptions {\n  name: string;\n  description?: string;\n  items: DatasetItemValue[];\n}\n\nclass HttpClientOptions {\n  apiKey: string;\n  baseURL: string;\n}\n\nclass HttpClient {\n  apiKey: string;\n  baseURL: string;\n\n  constructor(opts: HttpClientOptions) {\n    this.apiKey = opts.apiKey;\n    this.baseURL = this.sanitize_base_url(opts.baseURL);\n  }\n\n  private sanitize_base_url(baseURL: string): string {\n    baseURL = baseURL.trim();\n    if (baseURL.endsWith(\"/\")) {\n      return baseURL.slice(0, -1);\n    }\n    return baseURL;\n  }\n\n  fetch(input: string, init?: RequestInit | undefined): Promise<Response> {\n    return fetch(this.baseURL + input, {\n      ...init,\n      headers: {\n        ...init?.headers,\n        authorization: `Bearer ${this.apiKey}`,\n        \"content-type\": \"application/json\",\n      },\n    });\n  }\n}\n\nexport class Hamming extends HttpClient {\n  constructor(config: ClientOptions) {\n    super({\n      apiKey: config.apiKey,\n      baseURL: config.baseURL,\n    });\n  }\n\n  experiments = new Experiments(this);\n  datasets = new Datasets(this);\n}\n"],"mappings":"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","names":["ExperimentStatus","ExperimentItems","client","__publicField","experiment","datasetItem","startTs","ctx","output","durationMs","Experiments","opts","run","datasetId","dataset","name","score","DefaultScoreTypes","itemCtx","err","status","datasetName","ScoreType","Datasets","id","description","items","HttpClient","opts","__publicField","baseURL","input","init","Hamming","config","Experiments","Datasets"]}