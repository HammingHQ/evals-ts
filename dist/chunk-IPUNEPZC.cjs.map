{"version":3,"sources":["../src/types.ts"],"names":["ScoreType","ExperimentStatus","TracingMode","MonitoringItemStatus","SessionEnvironment","LogMessageType","FunctionType","ScorerExecutionType","LabelColor"],"mappings":"AAAO,IAAKA,OACVA,EAAA,WAAa,cACbA,EAAA,aAAe,gBACfA,EAAA,cAAgB,iBAChBA,EAAA,iBAAmB,oBACnBA,EAAA,cAAgB,gBAChBA,EAAA,WAAa,cACbA,EAAA,QAAU,UACVA,EAAA,OAAS,UARCA,OAAA,IAeAC,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,eAAiB,iBACjBA,EAAA,SAAW,WACXA,EAAA,OAAS,SANCA,OAAA,IAsIAC,OACVA,EAAA,IAAM,MACNA,EAAA,WAAa,aACbA,EAAA,WAAa,aAHHA,OAAA,IAqBAC,OACVA,EAAA,QAAU,UACVA,EAAA,UAAY,YACZA,EAAA,OAAS,SAHCA,OAAA,IAMAC,OACVA,EAAA,YAAc,cACdA,EAAA,QAAU,UACVA,EAAA,WAAa,aAHHA,OAAA,IAyBAC,OACVA,IAAA,WAAa,GAAb,aADUA,OAAA,IAcAC,OACVA,EAAA,QAAU,UACVA,EAAA,eAAiB,iBAFPA,OAAA,IAkBAC,OACVA,EAAA,MAAQ,QACRA,EAAA,OAAS,SAFCA,OAAA,IA6CAC,OACVA,EAAA,KAAO,OACPA,EAAA,WAAa,cACbA,EAAA,UAAY,aACZA,EAAA,MAAQ,QACRA,EAAA,OAAS,SACTA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,YAAc,eACdA,EAAA,OAAS,SACTA,EAAA,KAAO,OACPA,EAAA,IAAM,MAXIA,OAAA","sourcesContent":["export enum ScoreType {\n  AccuracyAI = \"accuracy_ai\",\n  FactsCompare = \"facts_compare\",\n  ContextRecall = \"context_recall\",\n  ContextPrecision = \"context_precision\",\n  Hallucination = \"hallucination\",\n  StringDiff = \"string_diff\",\n  Refusal = \"refusal\",\n  SqlAst = \"sql_ast\",\n}\n\nexport type InputType = Record<string, any>;\nexport type OutputType = Record<string, any>;\nexport type MetadataType = Record<string, any>;\n\nexport enum ExperimentStatus {\n  CREATED = \"CREATED\",\n  RUNNING = \"RUNNING\",\n  SCORING = \"SCORING\",\n  SCORING_FAILED = \"SCORING_FAILED\",\n  FINISHED = \"FINISHED\",\n  FAILED = \"FAILED\",\n}\n\nexport interface Experiment {\n  id: string;\n  name: string;\n  description?: string | null;\n  datasetId: number;\n  datasetVersionId?: number;\n  status: ExperimentStatus;\n}\n\nexport interface ExperimentItemMetrics {\n  durationMs?: number;\n}\n\nexport interface ExperimentItem {\n  id: string;\n  experimentId: string;\n  datasetItemId: string;\n  output: OutputType;\n  metrics: ExperimentItemMetrics;\n}\n\nexport interface ExperimentItemContext {\n  item: ExperimentItem;\n  startTs: number;\n}\n\nexport type DatasetId = string;\n\nexport interface DatasetItemValue {\n  input: InputType;\n  output: OutputType;\n  metadata: MetadataType;\n}\n\nexport type DatasetItem = DatasetItemValue & { id: string };\n\nexport interface Dataset {\n  id: string;\n  name: string;\n  description?: string;\n}\n\nexport type DatasetWithItems = Dataset & { items: DatasetItem[] };\n\nexport interface RunOptions {\n  dataset: DatasetId;\n  name?: string;\n  scoring?: (ScoreType | ScoringFunction)[];\n  metadata?: MetadataType;\n  parallel?: boolean | number;\n  sampling?: number;\n}\n\ninterface TracingContext {\n  experiment?: {\n    itemId?: string;\n  };\n  monitoring?: {\n    seqId?: number;\n  };\n}\n\nexport type RunContext = {\n  tracing: TracingContext;\n};\n\nexport type Runner = (input: InputType) => Promise<OutputType>;\n\nexport interface ClientOptions {\n  apiKey: string;\n  baseURL?: string;\n}\n\nexport interface CreateDatasetOptions {\n  name: string;\n  description?: string;\n  items: DatasetItemValue[];\n}\n\nexport type TraceEvent = Record<string, unknown>;\n\nexport type LLMProvider = \"openai\" | \"anthropic\" | \"azure_openai\";\n\nexport interface GenerationParams {\n  input?: string;\n  output?: string;\n  metadata?: {\n    provider?: LLMProvider;\n    model?: string;\n    stream?: boolean;\n    max_tokens?: number;\n    n?: number;\n    seed?: number;\n    temperature?: number;\n    usage?: {\n      completion_tokens?: number;\n      prompt_tokens?: number;\n      total_tokens?: number;\n    };\n    duration_ms?: number;\n    error?: boolean;\n    error_message?: string;\n  };\n}\n\nexport interface Document {\n  pageContent: string;\n  metadata: Record<string, any>;\n}\n\nexport interface RetrievalParams {\n  query?: string;\n  results?: Document[] | string[];\n  metadata?: {\n    engine?: string;\n  };\n}\n\nexport interface Trace {\n  id: number;\n  experimentItemId: string;\n  parentId?: number;\n  event: TraceEvent;\n}\n\nexport enum TracingMode {\n  OFF = \"off\",\n  MONITORING = \"monitoring\",\n  EXPERIMENT = \"experiment\",\n}\n\nexport interface ITracing {\n  logGeneration(params: GenerationParams): void;\n  logRetrieval(params: RetrievalParams): void;\n  log(key: string, value: unknown): void;\n  log(trace: TraceEvent): void;\n}\n\nexport interface MonitoringItem {\n  setInput(input: InputType): void;\n  setOutput(output: OutputType): void;\n  setMetadata(metadata: MetadataType): void;\n  end(error?: boolean, errorMessage?: string): void;\n  tracing: ITracing;\n}\n\nexport enum MonitoringItemStatus {\n  STARTED = \"STARTED\",\n  COMPLETED = \"COMPLETED\",\n  FAILED = \"FAILED\",\n}\n\nexport enum SessionEnvironment {\n  DEVELOPMENT = \"development\",\n  STAGING = \"staging\",\n  PRODUCTION = \"production\",\n}\n\nexport interface MonitoringStartOpts {\n  environment?: SessionEnvironment;\n}\n\nexport interface MonitoringSession {\n  id: string;\n  seqId: number;\n}\n\nexport interface MonitoringTraceContext {\n  session_id: string;\n  seq_id: number;\n  parent_seq_id?: number;\n}\n\nexport interface MonitoringTrace extends MonitoringTraceContext {\n  event: TraceEvent;\n}\n\nexport enum LogMessageType {\n  MONITORING = 1,\n}\n\nexport interface LogMessage {\n  type: LogMessageType;\n  payload?: MonitoringTrace;\n}\n\nexport interface Score {\n  value: number;\n  reason?: string;\n}\n\nexport enum FunctionType {\n  Numeric = \"numeric\",\n  Classification = \"classification\",\n}\n\nexport type NumericScoreConfig = {\n  type: FunctionType.Numeric;\n  aggregate: \"mean\" | \"median\";\n};\n\nexport type ClassificationScoreConfig = {\n  type: FunctionType.Classification;\n  labels: Record<number, string>;\n  colors?: Record<number, LabelColor>;\n};\n\nexport type ScoreConfig = ClassificationScoreConfig | NumericScoreConfig;\n\nexport enum ScorerExecutionType {\n  Local = \"local\",\n  Remote = \"remote\",\n}\n\ntype Scorer = LocalScorer | LLMClassifyScorer;\n\nexport interface LocalScorer {\n  type: ScorerExecutionType.Local;\n  scoreFn: (args: {\n    input: InputType;\n    output: OutputType;\n    expected: OutputType;\n  }) => Promise<Score>;\n}\n\ninterface RemoteScorer {\n  type: ScorerExecutionType.Remote;\n}\n\ninterface OpenAIModelConfig {\n  model: string;\n  temperature?: number;\n  seed?: number;\n  maxTokens?: number;\n}\n\nexport interface LLMClassifyScorer extends RemoteScorer {\n  provider: LLMProvider;\n  config: OpenAIModelConfig;\n  promptTemplate: string;\n}\n\nexport interface ScoringFunction {\n  name: string;\n  version: number;\n  scoreConfig?: ScoreConfig;\n  scorer: Scorer;\n}\n\nexport interface CustomScoringConfig {\n  id: string;\n  key_name: string;\n}\n\nexport enum LabelColor {\n  Gray = \"gray\",\n  LightGreen = \"light-green\",\n  LightBlue = \"light-blue\",\n  Amber = \"amber\",\n  Purple = \"purple\",\n  Pink = \"pink\",\n  Green = \"green\",\n  PastelGreen = \"pastel-green\",\n  Yellow = \"yellow\",\n  Blue = \"blue\",\n  Red = \"red\",\n}\n"]}