var u=Object.defineProperty;var d=(i,t,e)=>t in i?u(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var s=(i,t,e)=>(d(i,typeof t!="symbol"?t+"":t,e),e);var l=(i,t)=>i+t;var I=(n=>(n.CREATED="CREATED",n.RUNNING="RUNNING",n.SCORING="SCORING",n.SCORING_FAILED="SCORING_FAILED",n.FINISHED="FINISHED",n.FAILED="FAILED",n))(I||{}),a=class{constructor(t){s(this,"client");this.client=t}start(t,e){let r=Date.now();return{experiment:t,item:{datasetItemId:e.id,output:{},metrics:{durationMs:0}},startTs:r}}async end(t,e={}){let r=Date.now()-t.startTs;t.item.metrics.durationMs=r,t.item.output=e,await this.client.fetch(`/experiments/${t.experiment.id}/items`,{method:"POST",body:JSON.stringify(t.item)})}},m=class{constructor(t){s(this,"client");s(this,"items");this.client=t,this.items=new a(this.client)}async start(t,e){return(await(await this.client.fetch("/experiments",{method:"POST",body:JSON.stringify({name:t,dataset:e,status:"RUNNING"})})).json()).experiment}async end(t,e="FINISHED"){await this.client.fetch(`/experiments/${t.id}`,{method:"PATCH",body:JSON.stringify({status:e})})}},p=class{constructor(t){s(this,"client");this.client=t}async load(t){return(await(await this.client.fetch(`/datasets/${t}`)).json()).dataset}};var o=class{constructor(t){s(this,"apiKey");s(this,"baseURL");this.apiKey=t.apiKey,this.baseURL=this.sanitize_base_url(t.baseURL)}sanitize_base_url(t){return t=t.trim(),t.endsWith("/")?t.slice(0,-1):t}fetch(t,e){return fetch(this.baseURL+t,{...e,headers:{...e?.headers,authorization:`Bearer ${this.apiKey}`,"content-type":"application/json"}})}},c=class extends o{constructor(e){super({apiKey:e.apiKey,baseURL:e.baseURL});s(this,"experiments",new m(this));s(this,"datasets",new p(this))}};export{I as ExperimentStatus,c as Hamming,l as sum};
//# sourceMappingURL=index.js.map