import{a as I}from"./chunk-OI3NYQ4A.js";import{a as o}from"./chunk-OXHECJZ4.js";var D=(s=>(s.CREATED="CREATED",s.RUNNING="RUNNING",s.SCORING="SCORING",s.SCORING_FAILED="SCORING_FAILED",s.FINISHED="FINISHED",s.FAILED="FAILED",s))(D||{}),p=class{constructor(t){o(this,"client");this.client=t}async start(t,e){let r=(await(await this.client.fetch(`/experiments/${t.id}/items`,{method:"POST",body:JSON.stringify({datasetItemId:e.id,output:{},metrics:{}})})).json()).item,s=Date.now();return{item:r,startTs:s}}async end(t,e){let{item:a,startTs:n}=t,r=Date.now()-n;await this.client.tracing._flush(a.id),await this.client.fetch(`/experiments/${a.experimentId}/items/${a.id}`,{method:"PATCH",body:JSON.stringify({output:e,metrics:{durationMs:r}})})}},d=class{constructor(t){o(this,"client");o(this,"items");this.client=t,this.items=new p(this.client)}async run(t,e){let{dataset:a}=t,n=await this.client.datasets.load(a),{name:r=this.generateName(n.name),scoring:s=w,metadata:g={}}=t,i=await this.start(r,a,s,g),h=`${new URL(this.client.baseURL).origin}/experiments/${i.id}`;try{for(let m of n.items){let x=await this.items.start(i,m),v=await e(m.input);await this.items.end(x,v)}}catch(m){throw await this.end(i,"FAILED"),m}finally{await this.end(i),console.log("See experiment results at:",h)}return{experimentUrl:h}}async start(t,e,a,n){return(await(await this.client.fetch("/experiments",{method:"POST",body:JSON.stringify({name:t,dataset:e,status:"RUNNING",scoring:a,metadata:n})})).json()).experiment}async end(t,e="FINISHED"){await this.client.fetch(`/experiments/${t.id}`,{method:"PATCH",body:JSON.stringify({status:e})})}generateName(t){return`Experiment for ${t} - ${new Date().toLocaleString()}`}},E=(i=>(i.AccuracyAI="accuracy_ai",i.FactsCompare="facts_compare",i.ContextRecall="context_recall",i.ContextPrecision="context_precision",i.Hallucination="hallucination",i.StringDiff="string_diff",i.Refusal="refusal",i.SqlAst="sql_ast",i))(E||{}),w=["string_diff"],l=class{constructor(t){o(this,"client");this.client=t}async load(t){let e=await this.client.fetch(`/datasets/${t}`,{method:"GET"}),a;try{a=await e.json()}catch(n){throw new Error(`Failed to parse dataset response as JSON for dataset ID: ${t}: ${n}`)}return a.dataset}async list(){return(await(await this.client.fetch("/datasets")).json()).datasets}async create(t){let{name:e,description:a,items:n}=t;return(await(await this.client.fetch("/datasets",{method:"POST",body:JSON.stringify({name:e,description:a,items:n})})).json()).dataset}},u=class{constructor(t){o(this,"client");o(this,"collected",[]);o(this,"currentLocalTraceId",0);this.client=t}nextTraceId(){return this.currentLocalTraceId++}async _flush(t){let e=this.collected;this.collected=[];let a={id:this.nextTraceId(),experimentItemId:t,event:{kind:"root"}},n=[a];for(let r of e)n.push({id:this.nextTraceId(),experimentItemId:t,parentId:a.id,event:r});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:n})})}_generationEvent(t){return{kind:"llm",...t}}_retrievalEvent(t){let e=s=>typeof s=="string",a=t.results?.every(e),n=s=>typeof s=="string"?{pageContent:s,metadata:{}}:s,r=a?t.results?.map(n):t.results;return{kind:"vector",...t,results:r}}log(t,e){typeof t=="string"?this.collected.push({[t]:e}):this.collected.push(t)}logGeneration(t){this.log(this._generationEvent(t))}logRetrieval(t){this.log(this._retrievalEvent(t))}},y=["apiKey","baseURL"],f=class extends I{constructor(e){let a=Object.keys(e).filter(n=>!y.includes(n));a.length>0&&console.warn(`WARNING: Unexpected config keys found: ${a.join(", ")}. Valid config keys are: ${y.join(", ")}. The unexpected keys will be ignored.`);super({apiKey:e.apiKey,baseURL:e.baseURL??"https://app.hamming.ai/api/rest"});o(this,"experiments",new d(this));o(this,"datasets",new l(this));o(this,"tracing",new u(this))}};export{w as DefaultScoreTypes,D as ExperimentStatus,f as Hamming,E as ScoreType};
//# sourceMappingURL=index.js.map