import{a as v}from"./chunk-LBDEHSKQ.js";import"./chunk-TZ55H3QO.js";import{a as w}from"./chunk-3QRTNJLL.js";import{a as o}from"./chunk-GQSCBKA6.js";import{AsyncLocalStorage as C}from"async_hooks";var N=(i=>(i.CREATED="CREATED",i.RUNNING="RUNNING",i.SCORING="SCORING",i.SCORING_FAILED="SCORING_FAILED",i.FINISHED="FINISHED",i.FAILED="FAILED",i))(N||{}),u=class{constructor(t){o(this,"client");this.client=t}async start(t,e){let s=(await(await this.client.fetch(`/experiments/${t.id}/items`,{method:"POST",body:JSON.stringify({datasetItemId:e.id,output:{},metrics:{}})})).json()).item,i=Date.now();return{item:s,startTs:i}}async end(t,e){let{item:n,startTs:a}=t,s=Date.now()-a;await this.client.tracing._flush(n.id),await this.client.fetch(`/experiments/${n.experimentId}/items/${n.id}`,{method:"PATCH",body:JSON.stringify({output:e,metrics:{durationMs:s}})})}},g=class{constructor(t){o(this,"client");o(this,"items");this.client=t,this.items=new u(this.client)}async run(t,e){let{dataset:n}=t,a=await this.client.datasets.load(n),{name:s=this.generateName(a.name),scoring:i=b,metadata:p={}}=t,r=await this.start(s,n,i,p),f=`${new URL(this.client.baseURL).origin}/experiments/${r.id}`;try{if(t.parallel){let m=async l=>{let x=await this.items.start(r,l),R=await h.run(D(x.item.id),async()=>e(l.input));await this.items.end(x,R)},d=typeof t.parallel=="number"?t.parallel:void 0;await w(a.items,m,d)}else for(let m of a.items){let d=await this.items.start(r,m),l=await h.run(D(d.item.id),async()=>await e(m.input));await this.items.end(d,l)}}catch(m){throw await this.end(r,"FAILED"),m}finally{await this.end(r),console.log("See experiment results at:",f)}return{experimentUrl:f}}async start(t,e,n,a){return(await(await this.client.fetch("/experiments",{method:"POST",body:JSON.stringify({name:t,dataset:e,status:"RUNNING",scoring:n,metadata:a})})).json()).experiment}async end(t,e="FINISHED"){await this.client.fetch(`/experiments/${t.id}`,{method:"PATCH",body:JSON.stringify({status:e})})}generateName(t){return`Experiment for ${t} - ${new Date().toLocaleString()}`}};function D(c){return{tracing:{experiment:{itemId:c}}}}var h=new C,O=(r=>(r.AccuracyAI="accuracy_ai",r.FactsCompare="facts_compare",r.ContextRecall="context_recall",r.ContextPrecision="context_precision",r.Hallucination="hallucination",r.StringDiff="string_diff",r.Refusal="refusal",r.SqlAst="sql_ast",r))(O||{}),b=["string_diff"],y=class{constructor(t){o(this,"client");this.client=t}async load(t){let e=await this.client.fetch(`/datasets/${t}`,{method:"GET"}),n;try{n=await e.json()}catch(a){throw new Error(`Failed to parse dataset response as JSON for dataset ID: ${t}: ${a}`)}return n.dataset}async list(){return(await(await this.client.fetch("/datasets")).json()).datasets}async create(t){let{name:e,description:n,items:a}=t;return(await(await this.client.fetch("/datasets",{method:"POST",body:JSON.stringify({name:e,description:n,items:a})})).json()).dataset}},I=class{constructor(t){o(this,"client");o(this,"collected",{});o(this,"currentLocalTraceId",0);this.client=t}nextTraceId(){return this.currentLocalTraceId++}async _flush(t){let e=this.collected[t]??[];delete this.collected[t];let n={id:this.nextTraceId(),experimentItemId:t,event:{kind:"root"}},a=[n];for(let s of e)a.push({id:this.nextTraceId(),experimentItemId:t,parentId:n.id,event:s});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:a})})}_generationEvent(t){return{kind:"llm",...t}}_retrievalEvent(t){let e=i=>typeof i=="string",n=t.results?.every(e),a=i=>typeof i=="string"?{pageContent:i,metadata:{}}:i,s=n?t.results?.map(a):t.results;return{kind:"vector",...t,results:s}}log(t,e){let n=typeof t=="string"?{[t]:e}:t,s=h.getStore()?.tracing?.experiment?.itemId;if(!s){console.error("Unable to log trace event without experiment item ID.");return}this.collected[s]||(this.collected[s]=[]),this.collected[s].push(n)}logGeneration(t){this.log(this._generationEvent(t))}logRetrieval(t){this.log(this._retrievalEvent(t))}},T=["apiKey","baseURL"],E=class extends v{constructor(e){let n=Object.keys(e).filter(a=>!T.includes(a));n.length>0&&console.warn(`WARNING: Unexpected config keys found: ${n.join(", ")}. Valid config keys are: ${T.join(", ")}. The unexpected keys will be ignored.`);super({apiKey:e.apiKey,baseURL:e.baseURL??"https://app.hamming.ai/api/rest"});o(this,"experiments",new g(this));o(this,"datasets",new y(this));o(this,"tracing",new I(this))}};export{b as DefaultScoreTypes,N as ExperimentStatus,E as Hamming,O as ScoreType};
//# sourceMappingURL=index.js.map