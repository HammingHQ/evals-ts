import{a}from"./chunk-KN3XS55W.js";import{a as s}from"./chunk-GQSCBKA6.js";var c=class{constructor(e){s(this,"client");s(this,"collected",{});s(this,"currentLocalTraceId",0);s(this,"mode","off");this.client=e}_setMode(e){this.mode=e}nextTraceId(){return this.currentLocalTraceId++}async _flush(e){if(this.mode!=="experiment"){console.warn("Tracing mode must be set to <experiment>!");return}let i=this.collected[e]??[];delete this.collected[e];let r={id:this.nextTraceId(),experimentItemId:e,event:{kind:"root"}},n=[r];for(let t of i)n.push({id:this.nextTraceId(),experimentItemId:e,parentId:r.id,event:t});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:n})})}_generationEvent(e){return{kind:"llm",...e}}_retrievalEvent(e){let i=o=>typeof o=="string",r=e.results?.every(i),n=o=>typeof o=="string"?{pageContent:o,metadata:{}}:o,t=r?e.results?.map(n):e.results;return{kind:"vector",...e,results:t}}_logLiveTrace(e){if(this.mode!=="monitoring"){console.warn("Tracing mode must be set to <monitoring>!");return}this.client._logger.log({type:1,payload:e})}log(e,i){let r=typeof e=="string"?{[e]:i}:e;if(this.mode==="experiment"){let t=a.getStore()?.tracing?.experiment?.itemId;if(!t){console.error("Unable to log trace event without experiment item ID.");return}this.collected[t]||(this.collected[t]=[]),this.collected[t].push(r)}else if(this.mode==="monitoring"){let n=this.client.monitoring._getTraceContext();this._logLiveTrace({event:r,...n})}else console.warn("Attempt to send a log trace, but tracing mode is off!")}logGeneration(e){this.log(this._generationEvent(e))}logRetrieval(e){this.log(this._retrievalEvent(e))}};export{c as a};
//# sourceMappingURL=chunk-MFN3ORND.js.map