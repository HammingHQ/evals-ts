import{a as y}from"./chunk-KN3XS55W.js";import{a as E}from"./chunk-3QRTNJLL.js";import{a as o}from"./chunk-GQSCBKA6.js";var I=10;function R(d){return{tracing:{experiment:{itemId:d}}}}var O=["string_diff"],f=class{constructor(t){o(this,"client");this.client=t}async start(t,e,i){let s=(await(await this.client.fetch(`/experiments/${t.id}/items`,{method:"POST",body:JSON.stringify({datasetItemId:e.id,output:{},metrics:{},sampleId:i})})).json()).item,p=Date.now();return{item:s,startTs:p}}async end(t,e,i={}){let{item:n,startTs:r}=t,s=Date.now()-r;await this.client.tracing._flush(n.id),await this.client.fetch(`/experiments/${n.experimentId}/items/${n.id}`,{method:"PATCH",body:JSON.stringify({output:e,scores:i,metrics:{durationMs:s}})})}},F=class{constructor(t){o(this,"client");o(this,"items");this.client=t,this.items=new f(this.client)}async run(t,e){let{dataset:i}=t,n=await this.client.datasets.load(i);this.client.tracing._setMode("experiment");let{name:r=this.generateName(n.name),scoring:s=O,metadata:p={},sampling:u}=t,x=u??1;if(x>I)throw new Error(`The maximum number of samples is ${I}.`);let l=new w(this.client,s);await l.initialize();let g=await this.start(r,i,l.getConfig(),p,u),C=`${new URL(this.client.baseURL).origin}/experiments/${g.id}`;try{for(let c=0;c<x;c++)if(t.parallel){let m=async a=>{let S=await this.items.start(g,a,c),T=await y.run(R(S.item.id),async()=>e(a.input)),b=await l.score(a.input,a.output,T);await this.items.end(S,T,b)},h=typeof t.parallel=="number"?t.parallel:void 0;await E(n.items,m,h)}else for(let m of n.items){let h=await this.items.start(g,m,c),a=await y.run(R(h.item.id),async()=>await e(m.input)),S=await l.score(m.input,m.output,a);await this.items.end(h,a,S)}}catch(c){throw await this.end(g,"FAILED"),c}finally{await this.end(g),console.log("See experiment results at:",C)}return{experimentUrl:C}}async start(t,e,i,n,r){let s="RUNNING";return(await(await this.client.fetch("/experiments",{method:"POST",body:JSON.stringify({name:t,dataset:e,status:s,scoring:i,metadata:n,sampling:r})})).json()).experiment}async end(t,e="FINISHED"){await this.client.fetch(`/experiments/${t.id}`,{method:"PATCH",body:JSON.stringify({status:e})})}generateName(t){return`Experiment for ${t} - ${new Date().toLocaleString()}`}},w=class{constructor(t,e){o(this,"client");o(this,"standardScoring");o(this,"customScoring");o(this,"registeredFunctions",[]);o(this,"initialized",!1);this.client=t,this.standardScoring=e.filter(i=>typeof i=="string"),this.customScoring=e.filter(i=>typeof i!="string")}async initialize(){await this.registerScoringFunctions(),this.initialized=!0}getConfig(){if(!this.initialized)throw new Error("ScoringHelper is not initialized");return[...this.standardScoring,...this.registeredFunctions.map(t=>t.registration)]}async score(t,e,i){if(!this.initialized)throw new Error("ScoringHelper is not initialized");let n={},r=this.registeredFunctions.filter(s=>s.scorer.type==="local").map(async s=>{let u=await s.scorer.scoreFn({input:t,output:i,expected:e});n[s.registration.key_name]=u});return await Promise.allSettled(r),n}async registerScoringFunctions(){let t=this.customScoring.map(r=>({name:r.name,version:r.version,score_config:r.scoreConfig,execution_config:{}})),n=(await(await this.client.fetch("/scoring/register-functions",{method:"POST",body:JSON.stringify({scoring:t})})).json()).scoring??[];this.registeredFunctions=this.customScoring.map((r,s)=>({...r,registration:n[s]}))}};export{F as a};
//# sourceMappingURL=chunk-SNTZ22PI.js.map