{"version":3,"sources":["../src/resources/Monitoring.ts"],"sourcesContent":["import { randomUUID } from \"crypto\";\n\nimport type { Hamming } from \"../index\";\nimport {\n  MonitoringItemStatus,\n  MonitoringSession,\n  MonitoringTrace,\n  MonitoringTraceContext,\n} from \"../types/monitoring\";\nimport { TracingMode } from \"../types/tracing\";\nimport { InputType, MetadataType, OutputType } from \"../types/types\";\n\nexport class MonitoringItem {\n  monitoring: Monitoring;\n  sessionId: string;\n  seqId: number;\n  input: InputType | undefined;\n  output: OutputType | undefined;\n  metadata: MetadataType | undefined;\n  metrics: Record<string, any>;\n  status: MonitoringItemStatus;\n  errorMessage: string | undefined;\n  startTs: number;\n\n  constructor(monitoring: Monitoring, session_id: string, seq_id: number) {\n    this.monitoring = monitoring;\n    this.sessionId = session_id;\n    this.seqId = seq_id;\n    this.metrics = {};\n  }\n\n  setInput(input: InputType) {\n    this.input = input;\n  }\n\n  setOutput(output: OutputType) {\n    this.output = output;\n  }\n\n  setMetadata(metadata: MetadataType) {\n    this.metadata = metadata;\n  }\n\n  _start(input?: InputType, metadata?: MetadataType) {\n    this.input = input;\n    this.metadata = metadata;\n    this.startTs = Date.now();\n    this.status = MonitoringItemStatus.STARTED;\n  }\n\n  _end(error: boolean = false, errorMessage?: string) {\n    if (this._hasEnded()) return;\n\n    this.metrics.durationMs = Date.now() - this.startTs;\n    this.status = error\n      ? MonitoringItemStatus.FAILED\n      : MonitoringItemStatus.COMPLETED;\n    this.errorMessage = errorMessage;\n    this.monitoring._endItem(this._toTrace());\n  }\n\n  _hasEnded() {\n    return [\n      MonitoringItemStatus.COMPLETED,\n      MonitoringItemStatus.FAILED,\n    ].includes(this.status);\n  }\n\n  _toTrace(): MonitoringTrace {\n    return {\n      sessionId: this.sessionId,\n      seqId: this.seqId,\n      parentSeqId: undefined,\n      event: {\n        kind: \"monitoring\",\n        input: this.input,\n        output: this.output,\n        metadata: this.metadata,\n        metrics: this.metrics,\n        status: this.status,\n        errorMessage: this.errorMessage,\n      },\n    };\n  }\n}\n\nexport class Monitoring {\n  private client: Hamming;\n  private session: MonitoringSession | undefined;\n  private currentItem: MonitoringItem | undefined;\n\n  constructor(client: Hamming) {\n    this.client = client;\n  }\n\n  start() {\n    if (!this.session) {\n      this.session = {\n        id: randomUUID(),\n        seq_id: 0,\n      };\n    }\n    this.client.tracing._setMode(TracingMode.MONITORING);\n  }\n\n  stop() {\n    this.session = undefined;\n    this.client.tracing._setMode(TracingMode.OFF);\n  }\n\n  startItem(input?: InputType, metadata?: MetadataType) {\n    const [sessionId, seqId] = this._nextSeqId();\n\n    const item = new MonitoringItem(this, sessionId, seqId);\n    item._start(input, metadata);\n    this.currentItem = item;\n    return item;\n  }\n\n  _endItem(trace: MonitoringTrace) {\n    this.currentItem = undefined;\n    this.client.tracing._logLiveTrace(trace);\n  }\n\n  _getTraceContext(): MonitoringTraceContext {\n    if (!this.session) throw Error(\"Monitoring not started\");\n\n    const currentItem = this.currentItem;\n\n    const [sessionId, seqId] = this._nextSeqId();\n\n    return {\n      sessionId,\n      seqId,\n      parentSeqId: currentItem?.seqId,\n    };\n  }\n\n  private _nextSeqId(): [string, number] {\n    if (!this.session) {\n      throw Error(\"Monitoring not started\");\n    }\n    this.session.seq_id += 1;\n    return [this.session.id, this.session.seq_id];\n  }\n}\n"],"mappings":"wCAAA,OAAS,cAAAA,MAAkB,SAYpB,IAAMC,EAAN,KAAqB,CAY1B,YAAYC,EAAwBC,EAAoBC,EAAgB,CAXxEC,EAAA,mBACAA,EAAA,kBACAA,EAAA,cACAA,EAAA,cACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,qBACAA,EAAA,gBAGE,KAAK,WAAaH,EAClB,KAAK,UAAYC,EACjB,KAAK,MAAQC,EACb,KAAK,QAAU,CAAC,CAClB,CAEA,SAASE,EAAkB,CACzB,KAAK,MAAQA,CACf,CAEA,UAAUC,EAAoB,CAC5B,KAAK,OAASA,CAChB,CAEA,YAAYC,EAAwB,CAClC,KAAK,SAAWA,CAClB,CAEA,OAAOF,EAAmBE,EAAyB,CACjD,KAAK,MAAQF,EACb,KAAK,SAAWE,EAChB,KAAK,QAAU,KAAK,IAAI,EACxB,KAAK,gBACP,CAEA,KAAKC,EAAiB,GAAOC,EAAuB,CAC9C,KAAK,UAAU,IAEnB,KAAK,QAAQ,WAAa,KAAK,IAAI,EAAI,KAAK,QAC5C,KAAK,OAASD,uBAGd,KAAK,aAAeC,EACpB,KAAK,WAAW,SAAS,KAAK,SAAS,CAAC,EAC1C,CAEA,WAAY,CACV,MAAO,qBAGP,EAAE,SAAS,KAAK,MAAM,CACxB,CAEA,UAA4B,CAC1B,MAAO,CACL,UAAW,KAAK,UAChB,MAAO,KAAK,MACZ,YAAa,OACb,MAAO,CACL,KAAM,aACN,MAAO,KAAK,MACZ,OAAQ,KAAK,OACb,SAAU,KAAK,SACf,QAAS,KAAK,QACd,OAAQ,KAAK,OACb,aAAc,KAAK,YACrB,CACF,CACF,CACF,EAEaC,EAAN,KAAiB,CAKtB,YAAYC,EAAiB,CAJ7BP,EAAA,KAAQ,UACRA,EAAA,KAAQ,WACRA,EAAA,KAAQ,eAGN,KAAK,OAASO,CAChB,CAEA,OAAQ,CACD,KAAK,UACR,KAAK,QAAU,CACb,GAAIC,EAAW,EACf,OAAQ,CACV,GAEF,KAAK,OAAO,QAAQ,qBAA+B,CACrD,CAEA,MAAO,CACL,KAAK,QAAU,OACf,KAAK,OAAO,QAAQ,cAAwB,CAC9C,CAEA,UAAUP,EAAmBE,EAAyB,CACpD,GAAM,CAACM,EAAWC,CAAK,EAAI,KAAK,WAAW,EAErCC,EAAO,IAAIf,EAAe,KAAMa,EAAWC,CAAK,EACtD,OAAAC,EAAK,OAAOV,EAAOE,CAAQ,EAC3B,KAAK,YAAcQ,EACZA,CACT,CAEA,SAASC,EAAwB,CAC/B,KAAK,YAAc,OACnB,KAAK,OAAO,QAAQ,cAAcA,CAAK,CACzC,CAEA,kBAA2C,CACzC,GAAI,CAAC,KAAK,QAAS,MAAM,MAAM,wBAAwB,EAEvD,IAAMC,EAAc,KAAK,YAEnB,CAACJ,EAAWC,CAAK,EAAI,KAAK,WAAW,EAE3C,MAAO,CACL,UAAAD,EACA,MAAAC,EACA,YAAaG,GAAa,KAC5B,CACF,CAEQ,YAA+B,CACrC,GAAI,CAAC,KAAK,QACR,MAAM,MAAM,wBAAwB,EAEtC,YAAK,QAAQ,QAAU,EAChB,CAAC,KAAK,QAAQ,GAAI,KAAK,QAAQ,MAAM,CAC9C,CACF","names":["randomUUID","MonitoringItem","monitoring","session_id","seq_id","__publicField","input","output","metadata","error","errorMessage","Monitoring","client","randomUUID","sessionId","seqId","item","trace","currentItem"]}