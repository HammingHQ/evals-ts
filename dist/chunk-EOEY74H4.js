import{a as i}from"./chunk-GQSCBKA6.js";var a=class{constructor(e){i(this,"client");i(this,"collected",[]);i(this,"currentLocalTraceId",0);i(this,"mode","off");this.client=e}_setMode(e){this.mode=e}nextTraceId(){return this.currentLocalTraceId++}async _flush(e){if(this.mode!=="experiment"){console.warn("Tracing mode must be set to <experiment>!");return}let n=this.collected;this.collected=[];let t={id:this.nextTraceId(),experimentItemId:e,event:{kind:"root"}},r=[t];for(let s of n)r.push({id:this.nextTraceId(),experimentItemId:e,parentId:t.id,event:s});await this.client.fetch("/traces",{method:"POST",body:JSON.stringify({traces:r})})}_generationEvent(e){return{kind:"llm",...e}}_retrievalEvent(e){let n=o=>typeof o=="string",t=e.results?.every(n),r=o=>typeof o=="string"?{pageContent:o,metadata:{}}:o,s=t?e.results?.map(r):e.results;return{kind:"vector",...e,results:s}}_logLiveTrace(e){if(this.mode!=="monitoring"){console.warn("Tracing mode must be set to <monitoring>!");return}this.client.logger.log({type:1,payload:e})}log(e,n){if(this.mode==="monitoring"){let t=this.client.monitoring._getTraceContext();typeof e=="string"?this._logLiveTrace({...t,event:{[e]:n}}):this._logLiveTrace({...t,event:e})}else this.mode==="experiment"?typeof e=="string"?this.collected.push({[e]:n}):this.collected.push(e):console.warn("Attempt to send a log trace, but tracing mode is off!")}logGeneration(e){this.log(this._generationEvent(e))}logRetrieval(e){this.log(this._retrievalEvent(e))}};export{a};
//# sourceMappingURL=chunk-EOEY74H4.js.map