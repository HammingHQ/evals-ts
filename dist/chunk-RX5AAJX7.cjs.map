{"version":3,"sources":["../src/resources/ManualResetEvent.ts"],"names":["ManualResetEvent","isSet","__publicField","resolve"],"mappings":"yCAAO,IAAMA,EAAN,KAAuB,CAI5B,YAAYC,EAAQ,GAAO,CAH3BC,EAAA,KAAQ,SACRA,EAAA,KAAQ,WAGN,KAAK,MAAQD,EACb,KAAK,QAAU,CAAC,EACZA,GACF,KAAK,eAAe,CAExB,CAGA,KAAM,CACJ,KAAK,MAAQ,GACb,KAAK,eAAe,CACtB,CAGA,OAAQ,CACN,KAAK,MAAQ,EACf,CAGA,MAAO,CACL,OAAI,KAAK,MACA,QAAQ,QAAQ,EAGlB,IAAI,QAASE,GAAY,CAC9B,KAAK,QAAQ,KAAKA,CAAO,CAC3B,CAAC,CACH,CAGA,gBAAiB,CACf,KAAK,QAAQ,QAASA,GAAYA,EAAQ,CAAC,EAC3C,KAAK,QAAU,CAAC,CAClB,CACF","sourcesContent":["export class ManualResetEvent {\n  private isSet: boolean;\n  private waiters: Array<(...args: any) => void>;\n\n  constructor(isSet = false) {\n    this.isSet = isSet;\n    this.waiters = [];\n    if (isSet) {\n      this.resolveWaiters();\n    }\n  }\n\n  // Signal the event, allowing all waiting promises to continue\n  set() {\n    this.isSet = true;\n    this.resolveWaiters();\n  }\n\n  // Reset the event, causing future callers to wait\n  reset() {\n    this.isSet = false;\n  }\n\n  // Wait on the event, the promise resolves when the event is set\n  wait() {\n    if (this.isSet) {\n      return Promise.resolve();\n    }\n    // Create a new promise that will be resolved when the event is set\n    return new Promise((resolve) => {\n      this.waiters.push(resolve);\n    });\n  }\n\n  // Resolve all waiting promises\n  resolveWaiters() {\n    this.waiters.forEach((resolve) => resolve());\n    this.waiters = [];\n  }\n}\n"]}