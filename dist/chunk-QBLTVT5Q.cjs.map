{"version":3,"sources":["../src/utils/worker.ts"],"names":["runWorkers","workItems","runFn","count","iterator","workerCount","workers","idx","index","workItem"],"mappings":"AAEA,eAAsBA,EACpBC,EACAC,EACAC,EAAgB,IAChB,CACA,IAAMC,EAAWH,EAAU,QAAQ,EAC7BI,EAAc,KAAK,IAAIF,EAAOF,EAAU,OAAQ,GAAW,EAC3DK,EAAU,MAAMD,CAAW,EAC9B,KAAKD,CAAQ,EACb,IAAI,MAAOA,EAAUG,IAAQ,CAC5B,OAAW,CAACC,EAAOC,CAAQ,IAAKL,EAC1B,QAAQ,IAAI,WAAa,eAC3B,QAAQ,IAAI,UAAUG,CAAG,uBAAuBC,CAAK,EAAE,EAEzD,MAAMN,EAAMO,CAAQ,EAChB,QAAQ,IAAI,WAAa,eAC3B,QAAQ,IAAI,UAAUF,CAAG,sBAAsBC,CAAK,EAAE,CAG5D,CAAC,EACH,MAAM,QAAQ,IAAIF,CAAO,CAC3B","sourcesContent":["const MAX_WORKERS = 100;\n\nexport async function runWorkers<T>(\n  workItems: T[],\n  runFn: (workItem: T) => Promise<void>,\n  count: number = MAX_WORKERS,\n) {\n  const iterator = workItems.entries();\n  const workerCount = Math.min(count, workItems.length, MAX_WORKERS);\n  const workers = Array(workerCount)\n    .fill(iterator)\n    .map(async (iterator, idx) => {\n      for (const [index, workItem] of iterator) {\n        if (process.env.NODE_ENV === \"development\") {\n          console.log(`Worker ${idx} is processing task ${index}`);\n        }\n        await runFn(workItem);\n        if (process.env.NODE_ENV === \"development\") {\n          console.log(`Worker ${idx} has finished task ${index}`);\n        }\n      }\n    });\n  await Promise.all(workers);\n}\n"]}